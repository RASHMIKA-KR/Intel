import PdfDetails from '../models/PdfDetailsSchema.js';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import path from 'path';
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

export const uploadFile = async (req, res) => {
  console.log(req.file);
  const title = req.body.title;
  const originalFileName = req.file.originalname;
  const uniqueFileName = req.file.filename; // Get unique filename generated by multer

  try {
    await PdfDetails.create({ title: title, pdf: uniqueFileName ,filename: originalFileName,
    });
    res.send({ status: 'ok' });
  } catch (error) {
    res.json({ status: error });
  }
};

export const getPdfs = async (req, res) => {
  try {
    const data = await PdfDetails.find({});
    res.send({ status: 'ok', data: data });
  } catch (error) {
    res.json({ status: error.message });
  }
};

export const downloadPdf = async (req, res) => {
  const pdfId = req.params.pdfId;

  try {
    // Query the database to find the PDF file details by its ID
    const pdfDetails = await PdfDetails.findById(pdfId);

    if (!pdfDetails) {
      return res.status(404).json({ error: 'PDF file not found' });
    }

    // Assuming pdfDetails has a property like 'filename' which stores the actual file name in the file storage
    const fileName = pdfDetails.filename; // Adjust this according to your schema

    // Construct the full path to the PDF file
    const filePath = join(__dirname, '../files', fileName);

    // Send the file for download
    res.download(filePath, fileName, (err) => {
      if (err) {
        console.error('Error downloading file:', err);
        return res.status(500).json({ error: 'Failed to download PDF file' });
      }
    });
  } catch (error) {
    console.error('Error fetching PDF details:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};